/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.
	Created: xx.xx.2014

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "MainComponent.h"
#include "MainMenu.h"
#include "KeyboardDataStructure.h"
#include "ViewConstants.h"

//==============================================================================
class TerpstraSysExApplication  : public JUCEApplication
{
public:
    //==============================================================================
    TerpstraSysExApplication() : tooltipWindow() {}

    const String getApplicationName()       { return ProjectInfo::projectName; }
    const String getApplicationVersion()    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed()       { return true; }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        // This method is where you should put your application's initialisation code..   
		commandManager = new ApplicationCommandManager();
		commandManager->registerAllCommandsForTarget(this);

		menuModel = new TerpstraSysExMainMenuModel(commandManager);

        mainWindow = new MainWindow();
		mainWindow->setMenuBar(menuModel);
		mainWindow->addKeyListener(commandManager->getKeyMappings());

		// commandLine: may contain a file name
		if (!commandLine.isEmpty())
		{
			// XXX
		}
	}

    void shutdown()
    {
        // Add your application's shutdown code here..

        mainWindow = nullptr; // (deletes our window)
		menuModel = nullptr;
		commandManager = nullptr;
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

	void getAllCommands(Array <CommandID>& commands) override
	{
		JUCEApplication::getAllCommands(commands);

		const CommandID ids[] = { 
			TerpstraSysExMainMenuModel::commandIDs::openSysExMapping,
			TerpstraSysExMainMenuModel::commandIDs::saveSysExMappingAs,
			TerpstraSysExMainMenuModel::commandIDs::aboutSysEx
		};

		commands.addArray(ids, numElementsInArray(ids));
	}

	void getCommandInfo(CommandID commandID, ApplicationCommandInfo& result) override
	{
		switch (commandID)
		{
		case TerpstraSysExMainMenuModel::commandIDs::openSysExMapping:
			result.setInfo("Load file mapping", "Open a Terpstra SysEx mapping", "File", 0);
			result.addDefaultKeypress('o', ModifierKeys::ctrlModifier);
			break;

		case TerpstraSysExMainMenuModel::commandIDs::saveSysExMappingAs:
			result.setInfo("Save mapping as...", "Save the current mapping to file", "File", 0);
			result.addDefaultKeypress('a', ModifierKeys::ctrlModifier);
			break;

		case TerpstraSysExMainMenuModel::commandIDs::aboutSysEx:
			result.setInfo("About TerpstraSysEx", "Shows version and copyright", "Help", 0);
			break;

		default:
			JUCEApplication::getCommandInfo(commandID, result);
			break;
		}
	}

	bool perform(const InvocationInfo& info) override
	{
		switch (info.commandID)
		{
		case TerpstraSysExMainMenuModel::commandIDs::openSysExMapping:
			return OpenSysExMapping();
		case TerpstraSysExMainMenuModel::commandIDs::saveSysExMappingAs:
			return SaveSysExMappingAs();
		case TerpstraSysExMainMenuModel::commandIDs::aboutSysEx:
			return AboutTerpstraSysEx();
		default:                        
			return JUCEApplication::perform(info);
		}
	}

	bool OpenSysExMapping()
	{
		FileChooser chooser("Open a Terpstra SysEx mapping", File::nonexistent, "*.tsx");
		if (chooser.browseForFileToOpen())
		{
			File currentFile = chooser.getResult();
			// XXX error handling
			// XXX StringArray format: platform-independent?
			StringArray stringArray;
			currentFile.readLines(stringArray);
			TerpstraKeyMapping keyMapping;
			keyMapping.fromStringArray(stringArray);
			
			((MainContentComponent*)(mainWindow->getContentComponent()))->setData(keyMapping);
		}
		return true;
	}

	bool SaveSysExMappingAs()
	{
		FileChooser chooser("Terpstra SysEx Key Mapping Files", File::nonexistent, "*.tsx");
		if (chooser.browseForFileToSave(true))
		{
			File currentFile = chooser.getResult();
			if (currentFile.existsAsFile())
				currentFile.deleteFile();
			currentFile.create();
			// XXX error handling

			TerpstraKeyMapping keyMapping;
			((MainContentComponent*)(mainWindow->getContentComponent()))->getData(keyMapping);

			StringArray stringArray = keyMapping.toStringArray();
			for (int i = 0; i < stringArray.size(); i++)
				currentFile.appendText(stringArray[i]+"\n");
		}

		return true;
	}

	bool AboutTerpstraSysEx()
	{	
		String m;

		// XXX Version: there are the internal constants JUCE_APP_VERSION and JUCE_APP_VERSION_HEX...
		m << "Terpstra SysEx Utility" << newLine
			<< newLine
			<< "Version 0.2.0.3"	<< newLine
			<< newLine
			<< "Original design @ Dylan Horvath 2007" << newLine
			<< "Reengineered @ Hans Straub 2014" << newLine
			<< "Program icon based on a design by Bogdan Constantinescu" << newLine
			<< newLine
			<< "For help on using this program, or any questions relating to the Terpstra keyboard, go to http://terpstrakeyboard.com .";

		DialogWindow::LaunchOptions options;
		Label* label = new Label();
		label->setText(m, dontSendNotification);
		options.content.setOwned(label);

		Rectangle<int> area(0, 0, 400, 240);
		options.content->setSize(area.getWidth(), area.getHeight());

		options.dialogTitle = "About TerpstraSysEx";
		options.dialogBackgroundColour = Colour(MAINWINDOWBGCOLOUR);
		options.escapeKeyTriggersCloseButton = true;
		options.useNativeTitleBar = false;
		options.resizable = true;

		const RectanglePlacement placement(RectanglePlacement::xRight + RectanglePlacement::yBottom + RectanglePlacement::doNotResize);

		DialogWindow* dw = options.launchAsync();
		dw->centreWithSize(400, 300);

		return true;
	}

    //==============================================================================
    /*
        This class implements the desktop window that contains an instance of
        our MainContentComponent class.
    */
    class MainWindow    : public DocumentWindow
    {
    public:
        MainWindow()  : DocumentWindow ("Terpstra Keyboard SysEx Utility",
										Colour(MAINWINDOWBGCOLOUR),
                                        DocumentWindow::allButtons)
        {
            setContentOwned (new MainContentComponent(), true);

            centreWithSize (getWidth(), getHeight());
            setVisible (true);
        }

        void closeButtonPressed()
        {
            // This is called when the user tries to close this window. Here, we'll just
            // ask the app to quit when this happens, but you can change this to do
            // whatever you need.
            JUCEApplication::getInstance()->systemRequestedQuit();
        }

        /* Note: Be careful if you override any DocumentWindow methods - the base
           class uses a lot of them, so by overriding you might break its functionality.
           It's best to do all your work in your content component instead, but if
           you really have to override any DocumentWindow methods, make sure your
           subclass also calls the superclass's method.
        */

    private:
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)
    };

private:
    ScopedPointer<MainWindow> mainWindow;
	ScopedPointer<ApplicationCommandManager> commandManager;
	ScopedPointer<TerpstraSysExMainMenuModel> menuModel;

	TooltipWindow	tooltipWindow;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (TerpstraSysExApplication)
